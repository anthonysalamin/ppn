!(function () {
    "use strict";
    function e(e, t, n, r, a, i, o) {
      try {
        var s = e[i](o),
          c = s.value;
      } catch (e) {
        return void n(e);
      }
      s.done ? t(c) : Promise.resolve(c).then(r, a);
    }
    var t = function (t) {
      return function () {
        var n = this,
          r = arguments;
        return new Promise(function (a, i) {
          var o = t.apply(n, r);
          function s(t) {
            e(o, a, i, s, c, "next", t);
          }
          function c(t) {
            e(o, a, i, s, c, "throw", t);
          }
          s(void 0);
        });
      };
    };
    var n = function (e, t, n) {
      return (
        t in e
          ? Object.defineProperty(e, t, {
              value: n,
              enumerable: !0,
              configurable: !0,
              writable: !0
            })
          : (e[t] = n),
        e
      );
    };
    function r() {
      try {
        return new Date(
          document.head.querySelector("meta[http-equiv=last-modified]").content
        ).getTime();
      } catch (e) {
        try {
          return new Date(document.lastModified).getTime();
        } catch (e) {
          return new Date().getTime();
        }
      }
    }
    class a {
      constructor(e) {
        this.name = e;
      }
      open() {
        var e = this;
        return t(function* () {
          e.cache = yield caches.open(e.name);
        })();
      }
      addUrlToCache(e) {
        var n = this;
        return t(function* () {
          var t = yield fetch(e),
            r = yield t.text();
          return yield n.addResourceToCache(e, r), new Response(r);
        })();
      }
      getFromCache(e) {
        var n = arguments,
          a = this;
        return t(function* () {
          var t = n.length > 1 && void 0 !== n[1] ? n[1] : r();
          a.cache || (yield a.open());
          var i = yield a.cache.match(e);
          return i && i.headers.get("cached-on") > t.toString() ? i : null;
        })();
      }
      getCachedOrLiveURL(e) {
        var n = arguments,
          a = this;
        return t(function* () {
          var t = n.length > 1 && void 0 !== n[1] ? n[1] : r(),
            i = yield a.getFromCache(e, t);
          return i
            ? (console.log("Loaded from cache", e), i)
            : yield a.addUrlToCache(e, t);
        })();
      }
      addResourceToCache(e, n) {
        var r = this;
        return t(function* () {
          r.cache || (yield r.open());
          var t = new Headers();
          t.append("cached-on", new Date().getTime().toString()),
            yield r.cache.put(e, new Response(n, { headers: t }));
        })();
      }
    }
    var i = new a("pagination");
    class o {
      get hasNext() {
        return this.currentPage < this.pages.length - 1;
      }
      get hasPrevious() {
        return this.currentPage > 0;
      }
      constructor(e) {
        n(this, "currentPage", 0),
          n(this, "itemsWrapper", void 0),
          n(this, "pages", []),
          n(this, "prevPageButton", void 0),
          n(this, "nextPageButton", void 0),
          n(this, "onPageChanged", []),
          n(this, "pageCount", void 0),
          n(this, "loadMoreButton", void 0),
          (this.paginationEl = e),
          (this.itemsWrapper = e
            .closest(".w-dyn-list")
            .querySelector(".w-dyn-items")),
          (this.pageCount = this.paginationEl.querySelector(".w-page-count")),
          (this.pages = []),
          this.pages.push(this.itemsWrapper.innerHTML),
          this.itemsWrapper.querySelectorAll("template").forEach((e) => {
            e.content.innerHTML
              ? this.pages.push(e.content.innerHTML)
              : this.pages.push({ url: e.dataset.paginationUrl }),
              e.remove();
          }),
          this.pageCount &&
            (this.pageCount.textContent = "1 / " + this.pages.length),
          this.preloadNextPage(),
          (this.prevPageButton = e.querySelector(".w-pagination-previous")),
          (this.nextPageButton = e.querySelector(".w-pagination-next")),
          this.prevPageButton &&
            this.prevPageButton.addEventListener("click", (e) => {
              e.preventDefault(), this.goPage(this.currentPage - 1);
            }),
          this.nextPageButton &&
            this.nextPageButton.addEventListener("click", (e) => {
              e.preventDefault(), this.goPage(this.currentPage + 1);
            }),
          (this.loadMoreButton = e.querySelector('[data-action="load-more"]')),
          this.loadMoreButton &&
            this.loadMoreButton.addEventListener("click", (e) => {
              e.preventDefault(), this.addPage(this.currentPage + 1);
            }),
          (e._pagination = this),
          this.loadMoreButton && (this.pages[1] || this.loadMoreButton.remove());
      }
      loadAllPages() {
        var e = this;
        return t(function* () {
          for (
            var t = e.currentPage + 1;
            e.pages[t] && "object" == typeof e.pages[t];
  
          )
            (e.pages[t] = yield e.loadUrlData(e.pages[t].url)), (t += 1);
          return e.pages;
        })();
      }
      preloadNextPage() {
        var e = this;
        return t(function* () {
          var t = e.currentPage + 1;
          e.pages[t] &&
            "object" == typeof e.pages[t] &&
            (e.pages[t] = yield e.loadUrlData(e.pages[t].url));
        })();
      }
      addPage(e) {
        this.pages[e] &&
          (document.body.dispatchEvent(
            new CustomEvent("pagination-start", { bubbles: !0 })
          ),
          this.itemsWrapper.classList.add("loading"),
          (this.currentPage = e),
          (this.currentPage = e),
          "string" == typeof this.pages[this.currentPage]
            ? ((this.itemsWrapper.innerHTML += this.pages[this.currentPage]),
              window.Webflow &&
                window.Webflow.require("ix2") &&
                window.Webflow.require("ix2").init(),
              document.body.dispatchEvent(
                new CustomEvent("pagination-end", { bubbles: !0 })
              ),
              this.itemsWrapper.classList.remove("loading"),
              this.onPageChanged.forEach((e) => {
                e();
              }),
              setTimeout(() => {
                this.pages[this.currentPage + 1]
                  ? (this.loadMoreButton.style.display = "")
                  : (this.loadMoreButton.style.display = "none");
              }, 100))
            : this.loadPage(this.pages[this.currentPage]),
          this.preloadNextPage(),
          this.pageCount &&
            (this.pageCount.textContent =
              this.currentPage + 1 + " / " + this.pages.length));
      }
      goPage(e) {
        this.pages[e] &&
          (document.body.dispatchEvent(
            new CustomEvent("pagination-start", { bubbles: !0 })
          ),
          this.itemsWrapper.classList.add("loading"),
          (this.currentPage = e),
          "string" == typeof this.pages[this.currentPage]
            ? ((this.itemsWrapper.innerHTML = this.pages[this.currentPage]),
              window.Webflow &&
                window.Webflow.require("ix2") &&
                window.Webflow.require("ix2").init(),
              this.reloadPagination(),
              document.body.dispatchEvent(
                new CustomEvent("pagination-end", { bubbles: !0 })
              ),
              this.itemsWrapper.classList.remove("loading"),
              this.onPageChanged.forEach((e) => {
                e();
              }))
            : this.loadPage(this.pages[this.currentPage]),
          this.preloadNextPage(),
          this.pageCount &&
            (this.pageCount.textContent =
              this.currentPage + 1 + " / " + this.pages.length));
      }
      loadUrlData(e) {
        return t(function* () {
          e.includes("/public") && (e = e.replace("/public", ""));
          var t = yield i.getCachedOrLiveURL(e);
          return yield t.text();
        })();
      }
      loadAddPage(e) {
        var n = this;
        return t(function* () {
          (n.pages[n.currentPage] = yield n.loadUrlData(e.url)),
            n.addPage(n.currentPage);
        })();
      }
      loadPage(e) {
        var n = this;
        return t(function* () {
          (n.pages[n.currentPage] = yield n.loadUrlData(e.url)),
            n.goPage(n.currentPage);
        })();
      }
      reloadPagination() {
        this.hasPrevious
          ? this.prevPageButton && (this.prevPageButton.style.display = "")
          : this.prevPageButton && (this.prevPageButton.style.display = "none"),
          this.hasNext
            ? this.nextPageButton && (this.nextPageButton.style.display = "")
            : this.nextPageButton && (this.nextPageButton.style.display = "none");
      }
    }
    function s(e) {
      e.querySelectorAll(".w-pagination-wrapper").forEach((e) => {
        new o(e);
      });
    }
    document.addEventListener("DOMContentLoaded", () => {
      s(document),
        document.body.addEventListener("htmx:load", (e) => {
          s(e.target);
        });
    });
  })();
  